import pandas as pd
from string import ascii_lowercase
import random
import numpy as np
from itertools import compress
import math
resource = [random.choice(ascii_lowercase) + str(_) for _ in range(100)]
project = [random.choice(ascii_lowercase) + random.choice(ascii_lowercase) +
           str(_) for _ in range(50)]
lang_skill = ["R", "Python", "Scala", "Julia"]
db_skill = ["PSQL", "MySQL", "MongoDB", "Neo4j", "CouchDB"]
random.seed(1311)
resources = pd.DataFrame({
    "name": resource,
    "skill1": random.choices(lang_skill, k=100),
    "skill2": random.choices(db_skill, k=100)
})
projects = pd.DataFrame({
    "project": project,
    "skill1": random.choices(lang_skill, k=50),
    "skill2": random.choices(db_skill, k=50)
})
print(resources.head())
print("#########")
print(projects.head())
def schedule_display(sol):
    res = []
    proj = []
    resskill = []
    projskill = []
    slots = []
    for i in range(len(projects)): slots += [i, i]
    for i in range(len(sol)):
        x = int(sol[i])
        res.append(resources.name[i])
        pr = projects.project[slots[x]]
        proj.append(pr)
        resskill.append(list(resources.iloc[i, 1:]))
        pr_bool = projects.project == pr
        pr_ind = list(compress(range(len(pr_bool)), pr_bool))
        projskill.append(list(projects.iloc[pr_ind, 1:].values[0]))
        del slots[x]
    res_proj = pd.DataFrame({"Resource": res, "Project": proj,
                             "Res_Skill": resskill,
                             "Proj_Skill": projskill})
    return res_proj.sort_values("Project")
rand_sch = schedule_display([0 for _ in range(len(resources))])
print(rand_sch)
def resproj_cost(sol):
    cost = 0
    slots = []
    for i in range(len(projects)): slots += [i, i]
    for i in range(len(sol)):
        x = int(sol[i])
        proj = np.array(projects.iloc[slots[x], 1:])
        res = np.array(resources.iloc[i, 1:])
        cost += sum(res != proj)
        del slots[x]
    return cost
def simulated_annealing(domain, costf, temp=10000.0,
                        cool=0.95, step=1):
    current_sol = [float(random.randint(domain[i][0], domain[i][1])) for i in range(len(domain))]
    while temp > 0.1:
        i = random.randint(0, len(domain) - 1)
        direction = random.randint(- step, step)
        new_sol = current_sol[:]
        new_sol[i] += direction
        if new_sol[i] < domain[i][0]:
            new_sol[i] = domain[i][0]
        elif new_sol[i] > domain[i][1]:
            new_sol[i] = domain[i][1]
        current_cost = costf(current_sol)
        new_cost = costf(new_sol)
        p = math.e ** ((- new_cost - current_cost) / temp)
        if (new_cost < current_cost or random.random() < p):
            current_sol = new_sol
            print(new_cost)
        temp = temp * cool
    return current_sol
solution = [(0, (len(projects) * 2) - i - 1) for i in range(0, len(projects) * 2)]
schedule = simulated_annealing(solution, resproj_cost, step=3, cool=0.99)
schedule_df = schedule_display(schedule)
print(schedule_df.head(20))
